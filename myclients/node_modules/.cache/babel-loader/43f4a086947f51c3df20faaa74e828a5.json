{"ast":null,"code":"import _objectSpread from \"/Users/rafael/Ironhack/week8/myClients/myclients/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/rafael/Ironhack/week8/myClients/myclients/src/components/TaskContainer.js\";\nimport React, { Component } from 'react';\nimport TaskList from './TaskList';\nimport AuthServices from '../services/Services';\nexport default class TaskContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteTaskInfo = taskID => {\n      console.log(taskID);\n      const clientID = this.state.clientID;\n      this.service.deleteTaskInfo(taskID, clientID).then(response => {\n        this.setState(_objectSpread({}, this.state, {\n          newTaskDescription: \"\",\n          taskData: response.tasks\n        }));\n      }).catch(error => {\n        this.setState({\n          error: true\n        });\n      });\n    };\n\n    this.state = {\n      newTaskDescription: \"\",\n      taskData: this.props.taskData,\n      clientID: this.props.clientID\n    };\n    this.service = new AuthServices();\n  }\n\n  toggle(taskID, property) {\n    const clientID = this.state.clientID;\n    let chosenTask = this.state.taskData.filter(task => task._id === taskID)[0];\n    chosenTask[property] = !chosenTask[property];\n    console.log(chosenTask);\n    this.service.toggleTask(taskID, clientID, chosenTask.done, chosenTask.favourited).then(response => {// this.setState({\n      //   ...this.state,\n      //   taskData: response.tasks,\n      // });\n    });\n  }\n\n  updateNewTaskString(e) {\n    this.setState(_objectSpread({}, this.state, {\n      newTaskDescription: e.target.value\n    }));\n  }\n\n  addNewTask(e) {\n    const newTask = this.state.newTaskDescription;\n    const clientID = this.state.clientID;\n\n    if (e.key === 'Enter') {\n      this.service.addNewTask(newTask, clientID).then(response => {\n        this.setState(_objectSpread({}, this.state, {\n          newTaskDescription: \"\",\n          taskData: response.tasks\n        }));\n      }).catch(error => {\n        this.setState({\n          newInfoDescription: newTask,\n          error: true\n        });\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state.taskData);\n    return React.createElement(\"section\", {\n      className: \"task-collection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Add a new task\",\n      className: \"add-new-task\",\n      value: this.state.newTaskString,\n      onChange: e => this.updateNewTaskString(e),\n      onKeyDown: e => this.addNewTask(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), this.state.taskData ? React.createElement(TaskList, {\n      taskData: this.state.taskData,\n      toggleDone: task => this.toggle(task, \"done\"),\n      toggleFavourite: task => this.toggle(task, \"favourited\"),\n      deleteTaskInfo: this.deleteTaskInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/rafael/Ironhack/week8/myClients/myclients/src/components/TaskContainer.js"],"names":["React","Component","TaskList","AuthServices","TaskContainer","constructor","props","deleteTaskInfo","taskID","console","log","clientID","state","service","then","response","setState","newTaskDescription","taskData","tasks","catch","error","toggle","property","chosenTask","filter","task","_id","toggleTask","done","favourited","updateNewTaskString","e","target","value","addNewTask","newTask","key","newInfoDescription","render","newTaskString"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport TaskList from './TaskList';\nimport AuthServices from '../services/Services';\n\n\nexport default class TaskContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTaskDescription: \"\",\n      taskData: this.props.taskData,\n      clientID: this.props.clientID,\n    }\n    this.service = new AuthServices();\n  }\n\n  toggle(taskID, property) {\n    const clientID = this.state.clientID\n    let chosenTask = this.state.taskData.filter(task => task._id === taskID)[0]\n    chosenTask[property] = !chosenTask[property]\n    console.log(chosenTask)\n    this.service.toggleTask(taskID, clientID, chosenTask.done, chosenTask.favourited)\n      .then(response => {\n        // this.setState({\n        //   ...this.state,\n        //   taskData: response.tasks,\n        // });\n      })\n  }\n\n  updateNewTaskString(e) {\n    this.setState({\n      ...this.state,\n      newTaskDescription: e.target.value\n    })\n  }\n\n  addNewTask(e) {\n    const newTask = this.state.newTaskDescription\n    const clientID = this.state.clientID\n    if (e.key === 'Enter') {\n      this.service.addNewTask(newTask, clientID)\n        .then(response => {\n          this.setState({\n            ...this.state,\n            newTaskDescription: \"\",\n            taskData: response.tasks,\n          });\n        })\n        .catch(error => {\n          this.setState({\n            newInfoDescription: newTask,\n            error: true\n          });\n        })\n    }\n  }\n\n  deleteTaskInfo = (taskID) => {\n    console.log(taskID)\n    const clientID = this.state.clientID\n    this.service.deleteTaskInfo(taskID, clientID)\n      .then(response => {\n        this.setState({\n          ...this.state,\n          newTaskDescription: \"\",\n          taskData: response.tasks,\n        });\n      })\n      .catch(error => {\n        this.setState({\n          error: true\n        });\n      })\n  }\n\n  render() {\n    console.log(this.state.taskData)\n    return (\n      <section className=\"task-collection\">\n        <input type=\"text\"\n          placeholder=\"Add a new task\"\n          className=\"add-new-task\"\n          value={this.state.newTaskString}\n          onChange={(e) => this.updateNewTaskString(e)}\n          onKeyDown={(e) => this.addNewTask(e)} />\n\n\n\n\n        {(this.state.taskData) ?\n          <TaskList\n            taskData={this.state.taskData}\n            toggleDone={(task) => this.toggle(task, \"done\")}\n            toggleFavourite={(task) => this.toggle(task, \"favourited\")}\n            deleteTaskInfo={this.deleteTaskInfo}\n          >\n          </TaskList>\n          : null\n        }\n      </section>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}