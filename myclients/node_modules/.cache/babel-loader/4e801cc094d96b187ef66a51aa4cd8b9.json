{"ast":null,"code":"import _objectSpread from \"/Users/rafael/Ironhack/week8/myClients/myclients/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/rafael/Ironhack/week8/myClients/myclients/src/components/TaskContainer.js\";\nimport React, { Component } from 'react';\nimport TaskList from './TaskList';\nimport AuthServices from '../services/Services';\nexport default class TaskContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteTaskInfo = (task, taskID) => {\n      // console.log(task)\n      // console.log(taskID)\n      // let chosentask = this.state.taskData.filter(taskData => taskData !== task)\n      this.service.deleteInfo(info, taskID).then(response => {\n        console.log(response.infoData);\n        this.setState(_objectSpread({}, this.state, {\n          infoData: response.infoData\n        }));\n      }).catch(error => {\n        this.setState({\n          error: true\n        });\n      });\n    };\n\n    this.state = {\n      newTaskDescription: \"\",\n      taskData: this.props.taskData,\n      clientID: this.props.clientID\n    };\n    this.service = new AuthServices();\n  }\n\n  componentDidMount() {// axios\n    //     .get(\"http://localhost:7000/tasks\")\n    //     .then(taskData => {\n    //         taskData = taskData.data.map(task => {\n    //             return new TaskElement(\n    //                 task._id, task.description, task.timestamp, task.favourited, task.done\n    //             )\n    //         })\n    //         this.setState({\n    //             ...this.state,\n    //             tasks: taskData\n    //         })\n    //     })\n  }\n\n  toggle(taskID, property) {\n    let chosenTask = this.state.tasks.filter(task => task._id === taskID)[0];\n    chosenTask[property] = !chosenTask[property];\n    console.log(chosenTask); // this.service.toggle()\n    // axios\n    //   .put(`http://localhost:7000/task/${taskID}`, {\n    //     done: chosenTask.done,\n    //     favourited: chosenTask.favourited\n    //   })\n    //   .then(updatedTaskInfo => {\n    //     console.log(updatedTaskInfo);\n    //     this.setState({\n    //       ...this.state\n    //     })\n    //   })\n  }\n\n  updateNewTaskString(e) {\n    this.setState(_objectSpread({}, this.state, {\n      newTaskDescription: e.target.value\n    }));\n  }\n\n  addNewTask(e) {\n    const newTask = this.state.newTaskDescription;\n    const clientID = this.state.clientID;\n\n    if (e.key === 'Enter') {\n      this.service.addNewTask(newTask, clientID).then(response => {\n        this.setState(_objectSpread({}, this.state, {\n          newTaskDescription: \"\",\n          taskData: response.tasks\n        }));\n      }).catch(error => {\n        this.setState({\n          newInfoDescription: newTask,\n          error: true\n        });\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state.taskData);\n    return React.createElement(\"section\", {\n      className: \"task-collection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Add a new task\",\n      className: \"add-new-task\",\n      value: this.state.newTaskString,\n      onChange: e => this.updateNewTaskString(e),\n      onKeyDown: e => this.addNewTask(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), this.state.taskData ? React.createElement(TaskList, {\n      taskData: this.state.taskData,\n      toggleDone: task => this.toggle(task, \"done\"),\n      toggleFavourite: task => this.toggle(task, \"favourited\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/rafael/Ironhack/week8/myClients/myclients/src/components/TaskContainer.js"],"names":["React","Component","TaskList","AuthServices","TaskContainer","constructor","props","deleteTaskInfo","task","taskID","service","deleteInfo","info","then","response","console","log","infoData","setState","state","catch","error","newTaskDescription","taskData","clientID","componentDidMount","toggle","property","chosenTask","tasks","filter","_id","updateNewTaskString","e","target","value","addNewTask","newTask","key","newInfoDescription","render","newTaskString"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAGA,eAAe,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AACnDI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA0EnBC,cA1EmB,GA0EF,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACjC;AACA;AACA;AACA,WAAKC,OAAL,CAAaC,UAAb,CAAwBC,IAAxB,EAA8BH,MAA9B,EACGI,IADH,CACQC,QAAQ,IAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,QAArB;AACA,aAAKC,QAAL,mBACK,KAAKC,KADV;AAEEF,UAAAA,QAAQ,EAAEH,QAAQ,CAACG;AAFrB;AAID,OAPH,EAQGG,KARH,CAQSC,KAAK,IAAI;AACd,aAAKH,QAAL,CAAc;AACZG,UAAAA,KAAK,EAAE;AADK,SAAd;AAGD,OAZH;AAaD,KA3FkB;;AAEjB,SAAKF,KAAL,GAAa;AACXG,MAAAA,kBAAkB,EAAE,EADT;AAEXC,MAAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWiB,QAFV;AAGXC,MAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWkB;AAHV,KAAb;AAKA,SAAKd,OAAL,GAAe,IAAIP,YAAJ,EAAf;AACD;;AAEDsB,EAAAA,iBAAiB,GAAG,CAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,MAAM,CAACjB,MAAD,EAASkB,QAAT,EAAmB;AACvB,QAAIC,UAAU,GAAG,KAAKT,KAAL,CAAWU,KAAX,CAAiBC,MAAjB,CAAwBtB,IAAI,IAAIA,IAAI,CAACuB,GAAL,KAAatB,MAA7C,EAAqD,CAArD,CAAjB;AACAmB,IAAAA,UAAU,CAACD,QAAD,CAAV,GAAuB,CAACC,UAAU,CAACD,QAAD,CAAlC;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYY,UAAZ,EAHuB,CAIvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD;;AAEDI,EAAAA,mBAAmB,CAACC,CAAD,EAAI;AACrB,SAAKf,QAAL,mBACK,KAAKC,KADV;AAEEG,MAAAA,kBAAkB,EAAEW,CAAC,CAACC,MAAF,CAASC;AAF/B;AAID;;AAEDC,EAAAA,UAAU,CAACH,CAAD,EAAI;AACZ,UAAMI,OAAO,GAAG,KAAKlB,KAAL,CAAWG,kBAA3B;AACA,UAAME,QAAQ,GAAG,KAAKL,KAAL,CAAWK,QAA5B;;AACA,QAAIS,CAAC,CAACK,GAAF,KAAU,OAAd,EAAuB;AACrB,WAAK5B,OAAL,CAAa0B,UAAb,CAAwBC,OAAxB,EAAiCb,QAAjC,EACGX,IADH,CACQC,QAAQ,IAAI;AAChB,aAAKI,QAAL,mBACK,KAAKC,KADV;AAEEG,UAAAA,kBAAkB,EAAE,EAFtB;AAGEC,UAAAA,QAAQ,EAAET,QAAQ,CAACe;AAHrB;AAKD,OAPH,EAQGT,KARH,CAQSC,KAAK,IAAI;AACd,aAAKH,QAAL,CAAc;AACZqB,UAAAA,kBAAkB,EAAEF,OADR;AAEZhB,UAAAA,KAAK,EAAE;AAFK,SAAd;AAID,OAbH;AAcD;AACF;;AAqBDmB,EAAAA,MAAM,GAAG;AACPzB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,KAAL,CAAWI,QAAvB;AACA,WACE;AAAS,MAAA,SAAS,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AACE,MAAA,WAAW,EAAC,gBADd;AAEE,MAAA,SAAS,EAAC,cAFZ;AAGE,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWsB,aAHpB;AAIE,MAAA,QAAQ,EAAGR,CAAD,IAAO,KAAKD,mBAAL,CAAyBC,CAAzB,CAJnB;AAKE,MAAA,SAAS,EAAGA,CAAD,IAAO,KAAKG,UAAL,CAAgBH,CAAhB,CALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAWI,KAAKd,KAAL,CAAWI,QAAZ,GACC,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWI,QAA/B;AACE,MAAA,UAAU,EAAGf,IAAD,IAAU,KAAKkB,MAAL,CAAYlB,IAAZ,EAAkB,MAAlB,CADxB;AAEE,MAAA,eAAe,EAAGA,IAAD,IAAU,KAAKkB,MAAL,CAAYlB,IAAZ,EAAkB,YAAlB,CAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAMG,IAjBN,CADF;AAsBD;;AAtHkD","sourcesContent":["import React, { Component } from 'react'\nimport TaskList from './TaskList';\nimport AuthServices from '../services/Services';\n\n\nexport default class TaskContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newTaskDescription: \"\",\n      taskData: this.props.taskData,\n      clientID: this.props.clientID,\n    }\n    this.service = new AuthServices();\n  }\n\n  componentDidMount() {\n    // axios\n    //     .get(\"http://localhost:7000/tasks\")\n    //     .then(taskData => {\n    //         taskData = taskData.data.map(task => {\n    //             return new TaskElement(\n    //                 task._id, task.description, task.timestamp, task.favourited, task.done\n    //             )\n    //         })\n\n    //         this.setState({\n    //             ...this.state,\n    //             tasks: taskData\n    //         })\n    //     })\n  }\n\n  toggle(taskID, property) {\n    let chosenTask = this.state.tasks.filter(task => task._id === taskID)[0]\n    chosenTask[property] = !chosenTask[property]\n    console.log(chosenTask)\n    // this.service.toggle()\n    // axios\n    //   .put(`http://localhost:7000/task/${taskID}`, {\n    //     done: chosenTask.done,\n    //     favourited: chosenTask.favourited\n    //   })\n    //   .then(updatedTaskInfo => {\n    //     console.log(updatedTaskInfo);\n\n    //     this.setState({\n    //       ...this.state\n    //     })\n    //   })\n  }\n\n  updateNewTaskString(e) {\n    this.setState({\n      ...this.state,\n      newTaskDescription: e.target.value\n    })\n  }\n\n  addNewTask(e) {\n    const newTask = this.state.newTaskDescription\n    const clientID = this.state.clientID\n    if (e.key === 'Enter') {\n      this.service.addNewTask(newTask, clientID)\n        .then(response => {\n          this.setState({\n            ...this.state,\n            newTaskDescription: \"\",\n            taskData: response.tasks,\n          });\n        })\n        .catch(error => {\n          this.setState({\n            newInfoDescription: newTask,\n            error: true\n          });\n        })\n    }\n  }\n\n  deleteTaskInfo = (task, taskID) => {\n    // console.log(task)\n    // console.log(taskID)\n    // let chosentask = this.state.taskData.filter(taskData => taskData !== task)\n    this.service.deleteInfo(info, taskID)\n      .then(response => {\n        console.log(response.infoData)\n        this.setState({\n          ...this.state,\n          infoData: response.infoData,\n        });\n      })\n      .catch(error => {\n        this.setState({\n          error: true\n        });\n      })\n  }\n\n  render() {\n    console.log(this.state.taskData)\n    return (\n      <section className=\"task-collection\">\n        <input type=\"text\"\n          placeholder=\"Add a new task\"\n          className=\"add-new-task\"\n          value={this.state.newTaskString}\n          onChange={(e) => this.updateNewTaskString(e)}\n          onKeyDown={(e) => this.addNewTask(e)} />\n\n\n\n\n        {(this.state.taskData) ?\n          <TaskList taskData={this.state.taskData}\n            toggleDone={(task) => this.toggle(task, \"done\")}\n            toggleFavourite={(task) => this.toggle(task, \"favourited\")}\n          >\n          </TaskList>\n          : null\n        }\n      </section>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}