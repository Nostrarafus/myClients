{"ast":null,"code":"import axios from 'axios';\n\nconst errHandler = err => {\n  // console.error(err);\n  if (err.response && err.response.data) {\n    // console.error(\"API response\", err.response.data);\n    throw err.response.data.message;\n  }\n\n  throw err;\n};\n\nexport default class AuthServices {\n  constructor() {\n    this.addClient = clientName => {\n      return this.service.post('/addClient', {\n        clientName\n      }).then(response => response.data);\n    };\n\n    this.showAllClients = () => {\n      return this.service.get('/allClients').then(response => response.data);\n    };\n\n    this.signup = (username, password) => {\n      return this.service.post('/auth/signup', {\n        username,\n        password\n      }).then(response => response.data);\n    };\n\n    this.login = (username, password) => {\n      return this.service.post('/auth/login', {\n        username,\n        password\n      }).then(response => response.data);\n    };\n\n    this.loggedin = () => {\n      return this.service.get('/auth/loggedin').then(response => response.data);\n    };\n\n    this.logout = () => {\n      return this.service.get('/auth/logout').then(response => response.data);\n    };\n\n    this.getSingleClient = clientID => {\n      return this.service.get(\"/client/\".concat(clientID)).then(response => response.data);\n    };\n\n    this.addUserPicture = file => {\n      const formData = new FormData();\n      formData.append(\"photo\", file);\n      return this.service.put('/users/Userpic', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => response.data).catch(errHandler);\n    };\n\n    this.service = axios.create({\n      baseURL: 'http://localhost:5000',\n      withCredentials: true\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/rafael/Ironhack/week8/myClients/myclients/src/services/Services.js"],"names":["axios","errHandler","err","response","data","message","AuthServices","constructor","addClient","clientName","service","post","then","showAllClients","get","signup","username","password","login","loggedin","logout","getSingleClient","clientID","addUserPicture","file","formData","FormData","append","put","headers","catch","create","baseURL","withCredentials"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAGC,GAAG,IAAI;AACxB;AACA,MAAIA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAAjC,EAAuC;AACrC;AACA,UAAMF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBC,OAAxB;AACD;;AACD,QAAMH,GAAN;AACD,CAPD;;AAWA,eAAe,MAAMI,YAAN,CAAmB;AAChCC,EAAAA,WAAW,GAAG;AAAA,SAQdC,SARc,GAQDC,UAAD,IAAgB;AAC1B,aAAO,KAAKC,OAAL,CAAaC,IAAb,CAAkB,YAAlB,EAAgC;AAAEF,QAAAA;AAAF,OAAhC,EACJG,IADI,CACCT,QAAQ,IAAIA,QAAQ,CAACC,IADtB,CAAP;AAED,KAXa;;AAAA,SAadS,cAbc,GAaG,MAAM;AACrB,aAAO,KAAKH,OAAL,CAAaI,GAAb,CAAiB,aAAjB,EACJF,IADI,CACCT,QAAQ,IAAIA,QAAQ,CAACC,IADtB,CAAP;AAED,KAhBa;;AAAA,SAkBdW,MAlBc,GAkBL,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC/B,aAAO,KAAKP,OAAL,CAAaC,IAAb,CAAkB,cAAlB,EAAkC;AAAEK,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAlC,EACJL,IADI,CACCT,QAAQ,IAAIA,QAAQ,CAACC,IADtB,CAAP;AAED,KArBa;;AAAA,SAuBdc,KAvBc,GAuBN,CAACF,QAAD,EAAWC,QAAX,KAAwB;AAC9B,aAAO,KAAKP,OAAL,CAAaC,IAAb,CAAkB,aAAlB,EAAiC;AAAEK,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAjC,EACJL,IADI,CACCT,QAAQ,IAAIA,QAAQ,CAACC,IADtB,CAAP;AAED,KA1Ba;;AAAA,SA4Bde,QA5Bc,GA4BH,MAAM;AACf,aAAO,KAAKT,OAAL,CAAaI,GAAb,CAAiB,gBAAjB,EACJF,IADI,CACCT,QAAQ,IAAIA,QAAQ,CAACC,IADtB,CAAP;AAED,KA/Ba;;AAAA,SAiCdgB,MAjCc,GAiCL,MAAM;AACb,aAAO,KAAKV,OAAL,CAAaI,GAAb,CAAiB,cAAjB,EACJF,IADI,CACCT,QAAQ,IAAIA,QAAQ,CAACC,IADtB,CAAP;AAED,KApCa;;AAAA,SAsCdiB,eAtCc,GAsCKC,QAAD,IAAc;AAC9B,aAAO,KAAKZ,OAAL,CAAaI,GAAb,mBAA4BQ,QAA5B,GACJV,IADI,CACCT,QAAQ,IAAIA,QAAQ,CAACC,IADtB,CAAP;AAED,KAzCa;;AAAA,SA4CdmB,cA5Cc,GA4CIC,IAAD,IAAU;AACzB,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,IAAzB;AACA,aAAO,KAAKd,OAAL,CAAakB,GAAb,CAAiB,gBAAjB,EAAmCH,QAAnC,EAA6C;AAClDI,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADyC,OAA7C,EAKJjB,IALI,CAKCT,QAAQ,IAAIA,QAAQ,CAACC,IALtB,EAMJ0B,KANI,CAME7B,UANF,CAAP;AAOD,KAtDa;;AACZ,SAAKS,OAAL,GAAeV,KAAK,CAAC+B,MAAN,CAAa;AAC1BC,MAAAA,OAAO,EAAE,uBADiB;AAE1BC,MAAAA,eAAe,EAAE;AAFS,KAAb,CAAf;AAKD;;AAP+B","sourcesContent":["import axios from 'axios'\n\nconst errHandler = err => {\n  // console.error(err);\n  if (err.response && err.response.data) {\n    // console.error(\"API response\", err.response.data);\n    throw err.response.data.message\n  }\n  throw err;\n}\n\n\n\nexport default class AuthServices {\n  constructor() {\n    this.service = axios.create({\n      baseURL: 'http://localhost:5000',\n      withCredentials: true\n    })\n\n  }\n\n  addClient = (clientName) => {\n    return this.service.post('/addClient', { clientName })\n      .then(response => response.data)\n  }\n\n  showAllClients = () => {\n    return this.service.get('/allClients')\n      .then(response => response.data)\n  }\n\n  signup = (username, password) => {\n    return this.service.post('/auth/signup', { username, password })\n      .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('/auth/login', { username, password })\n      .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/auth/loggedin')\n      .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.get('/auth/logout')\n      .then(response => response.data)\n  }\n\n  getSingleClient = (clientID) => {\n    return this.service.get(`/client/${clientID}`)\n      .then(response => response.data)\n  }\n\n\n  addUserPicture = (file) => {\n    const formData = new FormData();\n    formData.append(\"photo\", file)\n    return this.service.put('/users/Userpic', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    })\n      .then(response => response.data)\n      .catch(errHandler);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}