{"ast":null,"code":"import _objectSpread from \"/Users/rafael/Ironhack/week8/myClients/myclients/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/rafael/Ironhack/week8/myClients/myclients/src/components/TaskContainer.js\";\nimport React, { Component } from 'react';\nimport TaskList from './TaskList';\nimport AuthServices from '../services/Services';\nexport default class TaskContainer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      newTaskDescription: \"\",\n      allTasks: this.props.alltasks,\n      clientID: this.props.clientID\n    };\n    this.service = new AuthServices();\n  }\n\n  componentDidMount() {// axios\n    //     .get(\"http://localhost:7000/tasks\")\n    //     .then(allTasks => {\n    //         allTasks = allTasks.data.map(task => {\n    //             return new TaskElement(\n    //                 task._id, task.description, task.timestamp, task.favourited, task.done\n    //             )\n    //         })\n    //         this.setState({\n    //             ...this.state,\n    //             tasks: allTasks\n    //         })\n    //     })\n  }\n\n  toggle(taskID, property) {\n    let chosenTask = this.state.tasks.filter(task => task._id === taskID)[0];\n    chosenTask[property] = !chosenTask[property];\n    axios.put(\"http://localhost:7000/task/\".concat(taskID), {\n      done: chosenTask.done,\n      favourited: chosenTask.favourited\n    }).then(updatedTaskInfo => {\n      console.log(updatedTaskInfo);\n      this.setState(_objectSpread({}, this.state));\n    });\n  }\n\n  updateNewTaskString(e) {\n    this.setState(_objectSpread({}, this.state, {\n      newTaskDescription: e.target.value\n    }));\n  }\n\n  addNewTask(e) {\n    const newTask = this.state.newTaskDescription;\n    const clientID = this.state.clientID; // const infoTitle = this.state.infoTitle\n\n    if (e.key === 'Enter') {\n      this.service.addNewTask(newInfo, clientID).then(response => {\n        console.log(response.infoData);\n        this.setState(_objectSpread({}, this.state, {\n          newTaskDescription: \"\",\n          allTasks: response\n        }));\n      }).catch(error => {\n        this.setState({\n          newInfoDescription: newInfo,\n          error: true\n        });\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      className: \"task-collection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Add a new task\",\n      className: \"add-new-task\",\n      value: this.state.newTaskString,\n      onChange: e => this.updateNewTaskString(e),\n      onKeyDown: e => this.addNewTask(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(TaskList, {\n      tasks: this.state.tasks,\n      toggleDone: task => this.toggle(task, \"done\"),\n      toggleFavourite: task => this.toggle(task, \"favourited\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/rafael/Ironhack/week8/myClients/myclients/src/components/TaskContainer.js"],"names":["React","Component","TaskList","AuthServices","TaskContainer","constructor","state","newTaskDescription","allTasks","props","alltasks","clientID","service","componentDidMount","toggle","taskID","property","chosenTask","tasks","filter","task","_id","axios","put","done","favourited","then","updatedTaskInfo","console","log","setState","updateNewTaskString","e","target","value","addNewTask","newTask","key","newInfo","response","infoData","catch","error","newInfoDescription","render","newTaskString"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport TaskList from './TaskList';\nimport AuthServices from '../services/Services';\n\n\nexport default class TaskContainer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      newTaskDescription: \"\",\n      allTasks: this.props.alltasks,\n      clientID: this.props.clientID,\n    }\n    this.service = new AuthServices();\n  }\n\n  componentDidMount() {\n    // axios\n    //     .get(\"http://localhost:7000/tasks\")\n    //     .then(allTasks => {\n    //         allTasks = allTasks.data.map(task => {\n    //             return new TaskElement(\n    //                 task._id, task.description, task.timestamp, task.favourited, task.done\n    //             )\n    //         })\n\n    //         this.setState({\n    //             ...this.state,\n    //             tasks: allTasks\n    //         })\n    //     })\n  }\n\n  toggle(taskID, property) {\n    let chosenTask = this.state.tasks.filter(task => task._id === taskID)[0]\n\n    chosenTask[property] = !chosenTask[property]\n\n    axios\n      .put(`http://localhost:7000/task/${taskID}`, {\n        done: chosenTask.done,\n        favourited: chosenTask.favourited\n      })\n      .then(updatedTaskInfo => {\n        console.log(updatedTaskInfo);\n\n        this.setState({\n          ...this.state\n        })\n      })\n  }\n\n  updateNewTaskString(e) {\n    this.setState({\n      ...this.state,\n      newTaskDescription: e.target.value\n    })\n  }\n\n  addNewTask(e) {\n    const newTask = this.state.newTaskDescription\n    const clientID = this.state.clientID\n    // const infoTitle = this.state.infoTitle\n    if (e.key === 'Enter') {\n      this.service.addNewTask(newInfo, clientID)\n        .then(response => {\n          console.log(response.infoData)\n          this.setState({\n            ...this.state,\n            newTaskDescription: \"\",\n            allTasks: response,\n          });\n        })\n        .catch(error => {\n          this.setState({\n            newInfoDescription: newInfo,\n            error: true\n          });\n        })\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"task-collection\">\n        <input type=\"text\"\n          placeholder=\"Add a new task\"\n          className=\"add-new-task\"\n          value={this.state.newTaskString}\n          onChange={(e) => this.updateNewTaskString(e)}\n          onKeyDown={(e) => this.addNewTask(e)} />\n        <TaskList tasks={this.state.tasks}\n          toggleDone={(task) => this.toggle(task, \"done\")}\n          toggleFavourite={(task) => this.toggle(task, \"favourited\")}\n        >\n        </TaskList>\n      </section>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}